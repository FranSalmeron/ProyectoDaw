<?php

namespace ContainerNQpc9C3;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_Container_Private_GosWebSocket_Dispatcher_TopicService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public '.container.private.gos_web_socket.dispatcher.topic' shared service.
     *
     * @return \Gos\Bundle\WebSocketBundle\Server\App\Dispatcher\TopicDispatcher
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/gos/web-socket-bundle/src/Server/App/Dispatcher/TopicDispatcherInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/gos/web-socket-bundle/src/Server/App/Dispatcher/TopicDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/gos/web-socket-bundle/src/Server/App/Registry/TopicRegistry.php';

        $a = ($container->services['.container.private.gos_web_socket.wamp.topic_manager'] ?? $container->load('get_Container_Private_GosWebSocket_Wamp_TopicManagerService'));

        if (isset($container->services['.container.private.gos_web_socket.dispatcher.topic'])) {
            return $container->services['.container.private.gos_web_socket.dispatcher.topic'];
        }

        $container->services['.container.private.gos_web_socket.dispatcher.topic'] = $instance = new \Gos\Bundle\WebSocketBundle\Server\App\Dispatcher\TopicDispatcher(($container->services['.container.private.gos_web_socket.registry.topic'] ?? ($container->services['.container.private.gos_web_socket.registry.topic'] = new \Gos\Bundle\WebSocketBundle\Server\App\Registry\TopicRegistry())), ($container->services['.container.private.gos_web_socket.topic.periodic_timer'] ?? $container->load('get_Container_Private_GosWebSocket_Topic_PeriodicTimerService')), $a);

        $instance->setLogger(($container->privates['monolog.logger.websocket'] ?? $container->load('getMonolog_Logger_WebsocketService')));

        return $instance;
    }
}
